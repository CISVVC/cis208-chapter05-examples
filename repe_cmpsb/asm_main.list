     1                                  %include "asm_io.inc"
     2                              <1> 	extern  read_int, print_int, print_string
     3                              <1> 	extern	read_char, print_char, print_nl
     4                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
     5                              <1> 
     6                              <1> %macro 	dump_regs 1
     7                              <1> 	push	  dword %1
     8                              <1> 	call	  sub_dump_regs
     9                              <1> %endmacro
    10                              <1> 
    11                              <1> 
    12                              <1> ;
    13                              <1> ; usage: dump_mem label, start-address, # paragraphs
    14                              <1> %macro  dump_mem 3
    15                              <1> 	push	 dword %1
    16                              <1> 	push	 dword %2
    17                              <1> 	push	 dword %3
    18                              <1> 	call	 sub_dump_mem
    19                              <1> %endmacro
    20                              <1> 
    21                              <1> %macro	dump_math 1
    22                              <1> 	push	 dword %1
    23                              <1> 	call	 sub_dump_math
    24                              <1> %endmacro
    25                              <1> 
    26                              <1> %macro  dump_stack 3
    27                              <1> 	push	 dword %3
    28                              <1>         push     dword %2
    29                              <1> 	push	 dword %1
    30                              <1>         call     sub_dump_stack
    31                              <1> %endmacro
    32                                  ;
    33                                  ; file: array1.asm
    34                                  ; This program demonstrates arrays in assembly
    35                                  ;
    36                                  ; To create executable:
    37                                  ; nasm -f coff array1.asm
    38                                  ; gcc -o array1 array1.o array1c.c
    39                                  ;
    40                                  
    41                                  segment .data
    42                                  ;array1 db 1,2,3,4,5,6,9,10,11,12
    43 00000000 010203040506070809-     array1 db 1,2,3,4,5,6,7,8,9,10
    44 00000009 0A                 
    45 0000000A 010203040506070809-     array2 db 1,2,3,4,5,6,7,8,9,10
    46 00000013 0A                 
    47                                  
    48                                  segment .bss
    49                                  segment .text
    50                                          global  asm_main
    51                                  asm_main:
    52 00000000 C8000000                        enter   0,0       
    53 00000004 FC                            cld
    54 00000005 BE[00000000]                  mov    esi, array1
    55 0000000A BF[0A000000]                  mov    edi, array2
    56 0000000F B90A000000                    mov    ecx, 10
    57 00000014 F3A6                          repe   cmpsb
    58                                  ; address of first block
    59                                  ; address of second block
    60                                  ; size of blocks in bytes
    61                                  ; repeat while Z flag is set
    62                                  ; if Z set, blocks equal
    63 00000016 7411                    je     equal
    64                                  ; code to perform if blocks are not equal
    65 00000018 B800000000              	  mov eax,0
    66 0000001D E8(00000000)            	  call print_int
    67 00000022 E8(00000000)            	  call print_nl
    68 00000027 EB0F                    jmp    onward
    69                                  equal:
    70                                     ; code to perform if equal
    71 00000029 B801000000              	  mov eax,1
    72 0000002E E8(00000000)            	  call print_int
    73 00000033 E8(00000000)            	  call print_nl
    74                                  onward:
    75 00000038 B800000000                      mov     eax, 0            ; return back to C
    76 0000003D C9                              leave                     
    77 0000003E C3                              ret
    78                                  
