     1                                  %include "asm_io.inc"
     2                              <1> 	extern  read_int, print_int, print_string
     3                              <1> 	extern	read_char, print_char, print_nl
     4                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
     5                              <1> 
     6                              <1> %macro 	dump_regs 1
     7                              <1> 	push	  dword %1
     8                              <1> 	call	  sub_dump_regs
     9                              <1> %endmacro
    10                              <1> 
    11                              <1> 
    12                              <1> ;
    13                              <1> ; usage: dump_mem label, start-address, # paragraphs
    14                              <1> %macro  dump_mem 3
    15                              <1> 	push	 dword %1
    16                              <1> 	push	 dword %2
    17                              <1> 	push	 dword %3
    18                              <1> 	call	 sub_dump_mem
    19                              <1> %endmacro
    20                              <1> 
    21                              <1> %macro	dump_math 1
    22                              <1> 	push	 dword %1
    23                              <1> 	call	 sub_dump_math
    24                              <1> %endmacro
    25                              <1> 
    26                              <1> %macro  dump_stack 3
    27                              <1> 	push	 dword %3
    28                              <1>         push     dword %2
    29                              <1> 	push	 dword %1
    30                              <1>         call     sub_dump_stack
    31                              <1> %endmacro
    32                                  ;
    33                                  ; file: array1.asm
    34                                  ; This program demonstrates arrays in assembly
    35                                  ;
    36                                  ; To create executable:
    37                                  ; nasm -f coff array1.asm
    38                                  ; gcc -o array1 array1.o array1c.c
    39                                  ;
    40                                  
    41                                  %define ARRAY_SIZE 5
    42                                  %define BYTE 1
    43                                  %define WORD 2
    44                                  %define DOUBLEWORD 4
    45                                  
    46                                  segment .data
    47                                  
    48 00000000 0504030201              array1  db  5,4,3,2,1 ; array of bytes
    49 00000005 050004000300020001-     array2  dw  5,4,3,2,1 ; array of words
    50 0000000E 00                 
    51                                  
    52 0000000F 050000000400000003-     array3  dd  5,4,3,2,1 ; array of words
    53 00000018 000000020000000100-
    54 00000021 0000               
    55                                  
    56                                  segment .bss
    57                                  
    58                                   
    59                                  
    60                                  segment .text
    61                                          global  asm_main
    62                                  asm_main:
    63 00000000 C8000000                        enter   0,0       
    64                                  
    65 00000004 31C0                            xor eax,eax 
    66 00000006 BB[05000000]                    mov ebx,array2
    67 0000000B B905000000                      mov ecx,ARRAY_SIZE
    68                                  loop1:
    69 00000010 8A03                            mov al,[ebx]
    70 00000012 E8(00000000)                    call print_int
    71 00000017 83C302                          add ebx,WORD
    72 0000001A E2F4                            loop loop1
    73                                  
    74 0000001C E8(00000000)                    call print_nl
    75                                  
    76 00000021 31C0                            xor eax,eax 
    77 00000023 BB[0F000000]                    mov ebx,array3
    78 00000028 B905000000                      mov ecx,ARRAY_SIZE
    79 0000002D BA00000000                      mov edx,0
    80                                  loop2:
    81 00000032 8B0493                          mov eax,[ebx+4*edx]
    82 00000035 E8(00000000)                    call print_int
    83 0000003A 42                              inc edx
    84 0000003B E2F5                            loop loop2
    85                                  
    86 0000003D E8(00000000)                    call print_nl
    87                                  
    88 00000042 B800000000                      mov     eax, 0            ; return back to C
    89 00000047 C9                              leave                     
    90 00000048 C3                              ret
    91                                  
