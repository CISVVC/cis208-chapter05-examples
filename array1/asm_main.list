     1                                  ;
     2                                  ; file: array1.asm
     3                                  ; This program demonstrates arrays in assembly
     4                                  ;
     5                                  ; To create executable:
     6                                  ; nasm -f coff array1.asm
     7                                  ; gcc -o array1 array1.o array1c.c
     8                                  ;
     9                                  
    10                                  %define ARRAY_SIZE 100
    11                                  %define NEW_LINE 10
    12                                  
    13                                  segment .data
    14 00000000 466972737420313020-     FirstMsg        db   "First 10 elements of array", 0
    15 00000009 656C656D656E747320-
    16 00000012 6F6620617272617900 
    17 0000001B 456E74657220696E64-     Prompt          db   "Enter index of element to display: ", 0
    18 00000024 6578206F6620656C65-
    19 0000002D 6D656E7420746F2064-
    20 00000036 6973706C61793A2000 
    21 0000003F 456C656D656E742025-     SecondMsg       db   "Element %d is %d", NEW_LINE, 0
    22 00000048 642069732025640A00 
    23 00000051 456C656D656E747320-     ThirdMsg        db   "Elements 20 through 29 of array", 0
    24 0000005A 3230207468726F7567-
    25 00000063 68203239206F662061-
    26 0000006C 7272617900         
    27 00000071 256400                  InputFormat     db   "%d", 0
    28 00000074 5468652076616C7565-     ValueFromScanf  db   "The value is %d",NEW_LINE,0
    29 0000007D 2069732025640A00   
    30                                  
    31                                  segment .bss
    32 00000000 <res 00000190>          array           resd ARRAY_SIZE
    33                                  
    34                                   
    35                                  
    36                                  segment .text
    37                                          extern  puts, printf, scanf, dump_line
    38                                          global  asm_main
    39                                  asm_main:
    40 00000000 C8080000                        enter   8,0             ; local dword variable at EBP - 4
    41 00000004 53                              push    ebx
    42 00000005 56                              push    esi
    43                                  
    44                                  
    45                                  ; initialize array to 100, 99, 98, 97, ...
    46                                  
    47 00000006 B964000000                      mov     ecx, ARRAY_SIZE
    48 0000000B BB[00000000]                    mov     ebx, array
    49                                  init_loop:
    50 00000010 890B                            mov     [ebx], ecx
    51 00000012 83C304                          add     ebx, 4
    52 00000015 E2F9                            loop    init_loop
    53                                  
    54 00000017 68[00000000]                    push    dword FirstMsg       ; print out elements 20-29
    55 0000001C E8(00000000)                    call    puts                 ; print out FirstMsg
    56 00000021 83C404                          add     esp, 4
    57                                  
    58 00000024 6A0A                            push    dword 10
    59 00000026 68[00000000]                    push    dword array
    60 0000002B E87A000000                      call    print_array           ; print first 10 elements of array
    61 00000030 83C408                          add     esp, 8
    62                                  
    63                                  ; prompt user for element index
    64                                  Prompt_loop:
    65 00000033 68[1B000000]                    push    dword Prompt
    66 00000038 E8(00000000)                    call    printf
    67 0000003D 59                              pop     ecx
    68 0000003E 8D45F8                          lea     eax, [ebp-8]      ; eax = address of local dword
    69 00000041 50                              push    eax
    70 00000042 68[71000000]                    push    dword InputFormat
    71 00000047 E8(00000000)                    call    scanf
    72                                  b1:
    73 0000004C 89C3                            mov     ebx,eax
    74 0000004E FF75F8                          push    dword [ebp-8]
    75 00000051 68[74000000]                    push    dword ValueFromScanf 
    76 00000056 E8(00000000)                    call    printf
    77 0000005B 83C408                          add     esp, 8
    78 0000005E 89D8                            mov     eax,ebx
    79                                  b2:
    80                                  
    81 00000060 83C408                          add     esp, 8
    82 00000063 83F801                          cmp     eax, 1               ; eax = return value of scanf
    83 00000066 7407                            je      InputOK
    84                                  
    85 00000068 E8(00000000)                    call    dump_line            ; dump rest of line and start over
    86 0000006D EBC4                            jmp     Prompt_loop          ; if input invalid
    87                                  InputOK:
    88 0000006F 8B75F8                          mov     esi, [ebp-8]
    89 00000072 FF34B5[00000000]                push    dword [array + 4*esi]
    90 00000079 56                              push    esi
    91 0000007A 68[3F000000]                    push    dword SecondMsg      ; print out value of element
    92 0000007F E8(00000000)                    call    printf
    93 00000084 83C40C                          add     esp, 12
    94 00000087 68[51000000]                    push    dword ThirdMsg       ; print out elements 20-29
    95 0000008C E8(00000000)                    call    puts
    96 00000091 59                              pop     ecx
    97                                  
    98 00000092 6A0A                            push    dword 10
    99 00000094 68[50000000]                    push    dword array + 20*4     ; address of array[20]
   100 00000099 E80C000000                      call    print_array
   101 0000009E 83C408                          add     esp, 8
   102                                  
   103 000000A1 5E                              pop     esi
   104 000000A2 5B                              pop     ebx
   105 000000A3 B800000000                      mov     eax, 0            ; return back to C
   106 000000A8 C9                              leave                     
   107 000000A9 C3                              ret
   108                                  
   109                                  ;
   110                                  ; routine print_array
   111                                  ; C-callable routine that prints out elements of a double word array as
   112                                  ; signed integers.
   113                                  ; C prototype:
   114                                  ; void print_array( const int * a, int n);
   115                                  ; Parameters:
   116                                  ;   a - pointer to array to print out (at ebp+8 on stack)
   117                                  ;   n - number of integers to print out (at ebp+12 on stack)
   118                                  
   119                                  segment .data
   120 00000085 252D3564202535640A-     OutputFormat    db   "%-5d %5d", NEW_LINE, 0
   121 0000008E 00                 
   122                                  
   123                                  segment .text
   124                                          global  print_array
   125                                  print_array:
   126 000000AA C8000000                        enter   0,0
   127 000000AE 56                              push    esi
   128 000000AF 53                              push    ebx
   129                                  
   130 000000B0 31F6                            xor     esi, esi                  ; esi = 0
   131 000000B2 8B4D0C                          mov     ecx, [ebp+12]             ; ecx = n
   132 000000B5 8B5D08                          mov     ebx, [ebp+8]              ; ebx = address of array
   133                                  print_loop:
   134 000000B8 51                              push    ecx                       ; printf might change ecx!
   135                                  
   136 000000B9 FF34B3                          push    dword [ebx + 4*esi]       ; push array[esi]
   137 000000BC 56                              push    esi
   138 000000BD 68[85000000]                    push    dword OutputFormat
   139 000000C2 E8(00000000)                    call    printf
   140 000000C7 83C40C                          add     esp, 12                   ; remove parameters (leave ecx!)
   141                                  
   142 000000CA 46                              inc     esi
   143 000000CB 59                              pop     ecx
   144 000000CC E2EA                            loop    print_loop
   145                                  
   146 000000CE 5B                              pop     ebx
   147 000000CF 5E                              pop     esi
   148 000000D0 C9                              leave
   149 000000D1 C3                              ret
   150                                  
   151                                  
   152                                  
   153                                  
